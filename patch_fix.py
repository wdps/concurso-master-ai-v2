import re
import os
import shutil

# --- CONFIGURA√á√ÉO ---
FILE_TO_PATCH = 'index.html'
BACKUP_FILE = 'index.html.bak'

# --- C√ìDIGO NOVO (CORRIGIDO) ---

# Vers√£o corrigida da fun√ß√£o proximaQuestao
PROXIMA_QUESTAO_FIX = """
        async function proximaQuestao() {
            // Verifica se √© a √∫ltima quest√£o
            if (questaoAtualIndice >= totalQuestoesSessao - 1) {
                // √öltima quest√£o - Iniciar processo de finaliza√ß√£o
                
                // 1. Parar cron√¥metros
                stopTimer();
                stopCronometroSimulado();
                
                // 2. Mostrar indicador de salvamento
                document.getElementById('question-content-container').innerHTML = `
                    <div style="padding: 60px; text-align: center; color: var(--color-secondary); font-size: 1.2em;">
                        <div class="loading-spinner" style="border-top-color: var(--color-primary); margin: 0 auto 20px auto;"></div>
                        üíæ Registrando seu resultado...
                    </div>
                `;
                // Esconder bot√£o de finalizar (pois j√° estamos finalizando)
                document.getElementById('btn-finalizar-sessao').style.display = 'none';

                // 3. Registrar o hist√≥rico (se for simulado)
                if (modoSessao === 'simulado') {
                    await registrarHistoricoSimulado();
                }
                
                // 4. Mostrar a tela de resultados
                mostrarFim();

            } else {
                // Se n√£o for a √∫ltima, apenas avan√ßa
                questaoAtualIndice++;
                carregarQuestao();
            }
        }
"""

# Vers√£o corrigida da fun√ß√£o finalizarSessaoAntecipada
FINALIZAR_SESSAO_FIX = """
        async function finalizarSessaoAntecipada() {
            if (confirm("üéØ Tem certeza que deseja finalizar a sess√£o agora? Sua nota ser√° calculada com base nas quest√µes respondidas.")) {
                
                // 1. Parar cron√¥metros
                stopTimer();
                stopCronometroSimulado();
                
                // 2. Mostrar indicador de salvamento
                document.getElementById('question-content-container').innerHTML = `
                    <div style="padding: 60px; text-align: center; color: var(--color-secondary); font-size: 1.2em;">
                        <div class="loading-spinner" style="border-top-color: var(--color-primary); margin: 0 auto 20px auto;"></div>
                        üíæ Registrando seu resultado...
                    </div>
                `;
                // Esconder bot√£o de finalizar
                document.getElementById('btn-finalizar-sessao').style.display = 'none';

                // 3. Registrar hist√≥rico (se for simulado)
                if (modoSessao === 'simulado') {
                    await registrarHistoricoSimulado();
                }
                
                // 4. Mostrar tela de resultados
                mostrarFim();
            }
        }
"""

# Vers√£o corrigida da fun√ß√£o mostrarFim
MOSTRAR_FIM_FIX = """
        // --- TELA DE RESULTADO FINAL PREMIUM ---
        function mostrarFim() {
            // REMOVIDO: stopTimer() e stopCronometroSimulado()
            // (Agora s√£o chamados ANTES de salvar o hist√≥rico)
            
            const percentualAcertos = totalQuestoesSessao > 0 ? (acertosSessao / totalQuestoesSessao) * 100 : 0;
            const percentualPontuacao = notaMaximaSessao > 0 ? (pontuacaoSessao / notaMaximaSessao) * 100 : 0;
            const tempoMedio = tempoPorQuestao.length > 0 ? 
                tempoPorQuestao.reduce((a, b) => a + b) / tempoPorQuestao.length : 0;

            const resultadoHTML = `
                <div class="resultado-final">
                    <h2>üéâ ${modoSessao === 'estudo' ? 'Sess√£o de Estudo' : 'Simulado'} Conclu√≠do!</h2>
                    <span class="mode-tag">${modoSessao === 'estudo' ? 'üìö Modo Estudo' : 'üéØ Modo Simulado'}</span>
                    
                    <strong class="score">${percentualPontuacao.toFixed(1)}%</strong>
                    
                    <div class="metricas-container">
                        <div class="metrica">
                            <span class="valor">${acertosSessao}/${totalQuestoesSessao}</span>
                            <span class="label">‚úÖ Quest√µes Corretas</span>
                        </div>
                        <div class="metrica">
                            <span class="valor">${formatTime(totalTimeElapsed)}</span>
                            <span class="label">‚è±Ô∏è Tempo Total</span>
                        </div>
                        <div class="metrica">
                            <span class="valor">${tempoMedio.toFixed(1)}s</span>
                            <span class="label">üìä Tempo M√©dio/Q</span>
                        </div>
                        <div class="metrica">
                            <span class="valor">${pontuacaoSessao.toFixed(1)}</span>
                            <span class="label">‚öñÔ∏è Pontua√ß√£o Total</span>
                        </div>
                    </div>
                    
                    <div class="analise-final">
                        <h3>üìà An√°lise do Desempenho</h3>
                        <p>${gerarAnaliseDesempenho(percentualPontuacao, tempoMedio)}</p>
                        <p><strong>üéØ Recomenda√ß√£o:</strong> ${gerarRecomendacao(percentualPontuacao)}</p>
                    </div>
                    
                    <div style="margin-top: 30px;">
                        <button onclick="window.location.reload()" style="
                            background: var(--gradient-primary);
                            color: white;
                            padding: 15px 30px;
                            border: none;
                            border-radius: 10px;
                            font-size: 1.1em;
                            cursor: pointer;
                            margin: 0 10px;
                        ">üîÑ Nova Sess√£o</button>
                        
                        <button onclick="window.location.href='dashboard.html'" style="
                            background: var(--gradient-success);
                            color: white;
                            padding: 15px 30px;
                            border: none;
                            border-radius: 10px;
                            font-size: 1.1em;
                            cursor: pointer;
                            margin: 0 10px;
                        ">üìä Ver Dashboard</button>
                    </div>
                </div>
            `;
            
            document.getElementById('question-content-container').innerHTML = resultadoHTML;
            
            // Garante que o bot√£o de finalizar sess√£o seja ocultado
            document.getElementById('btn-finalizar-sessao').style.display = 'none';
        }
"""

# --- L√ìGICA DO PATCH ---

def patch_file():
    print(f"--- Iniciando patch para {FILE_TO_PATCH} ---")

    # 1. Verificar se o arquivo existe
    if not os.path.exists(FILE_TO_PATCH):
        print(f"‚ùå ERRO: Arquivo '{FILE_TO_PATCH}' n√£o encontrado.")
        print("Certifique-se de que este script est√° na mesma pasta que o seu index.html")
        return

    # 2. Criar backup
    try:
        shutil.copyfile(FILE_TO_PATCH, BACKUP_FILE)
        print(f"‚úÖ Backup criado com sucesso: {BACKUP_FILE}")
    except Exception as e:
        print(f"‚ùå ERRO ao criar backup: {e}")
        return

    # 3. Ler o conte√∫do do arquivo
    try:
        with open(FILE_TO_PATCH, 'r', encoding='utf-8') as f:
            content = f.read()
    except Exception as e:
        print(f"‚ùå ERRO ao ler o arquivo: {e}")
        return

    # 4. Definir os padr√µes (Regex) para encontrar as fun√ß√µes antigas
    # (re.DOTALL faz o '.' incluir quebras de linha)
    # (re.MULTILINE faz o '^' e '$' funcionarem em cada linha)
    patterns = {
        "proximaQuestao": (
            re.compile(r"async function proximaQuestao\(\) \{.*?\n\s*\}", re.DOTALL | re.MULTILINE),
            PROXIMA_QUESTAO_FIX
        ),
        "finalizarSessaoAntecipada": (
            re.compile(r"async function finalizarSessaoAntecipada\(\) \{.*?\n\s*\}", re.DOTALL | re.MULTILINE),
            FINALIZAR_SESSAO_FIX
        ),
        "mostrarFim": (
            re.compile(r"function mostrarFim\(\) \{.*?\n\s*\}", re.DOTALL | re.MULTILINE),
            MOSTRAR_FIM_FIX
        )
    }

    # 5. Aplicar as substitui√ß√µes
    modified_content = content
    replacements_made = 0

    for func_name, (pattern, fix) in patterns.items():
        if pattern.search(modified_content):
            modified_content = pattern.sub(fix, modified_content, count=1)
            print(f"‚úÖ Fun√ß√£o '{func_name}' corrigida.")
            replacements_made += 1
        else:
            print(f"‚ö†Ô∏è AVISO: Fun√ß√£o '{func_name}' n√£o encontrada. Pode j√° ter sido corrigida.")

    # 6. Salvar o arquivo modificado
    if replacements_made > 0:
        try:
            with open(FILE_TO_PATCH, 'w', encoding='utf-8') as f:
                f.write(modified_content)
            print(f"\nüéâ Sucesso! O arquivo '{FILE_TO_PATCH}' foi corrigido.")
        except Exception as e:
            print(f"‚ùå ERRO ao salvar o arquivo corrigido: {e}")
            print(f"Seu arquivo original est√° salvo em: {BACKUP_FILE}")
    else:
        print("\nNenhuma corre√ß√£o foi aplicada. O arquivo n√£o foi modificado.")

if __name__ == "__main__":
    patch_file()