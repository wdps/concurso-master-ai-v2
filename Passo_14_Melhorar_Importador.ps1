# Passo 14 (Diagn√≥stico Avan√ßado): Melhorando o script 'importar_dados.py'

Write-Host "üöÄ Iniciando Passo 14: Tornando 'importar_dados.py' mais robusto e informativo..." -ForegroundColor Cyan

# Conte√∫do MELHORADO do script Python 'importar_dados.py'
$pythonScriptContentMelhorado = @'
import sqlite3
import csv
import json
import os
import sys
import re # Importa regex para alternativas

print("--- INICIANDO SCRIPT DE IMPORTA√á√ÉO E ATUALIZA√á√ÉO DO BANCO (V3 Diagn√≥stico) ---")

# Lista de 50 temas de reda√ß√£o (Estilo ENEM/Concursos) - Mantida igual
temas_redacao_lista = [
    ("A persist√™ncia da viol√™ncia contra a mulher na sociedade brasileira", "Disserta√ß√£o", "Dif√≠cil"), ("Desafios para a valoriza√ß√£o de comunidades e povos tradicionais no Brasil", "Disserta√ß√£o", "Dif√≠cil"),
    ("Invisibilidade e registro civil: garantia de acesso √† cidadania no Brasil", "Disserta√ß√£o", "M√©dio"), ("O estigma associado √†s doen√ßas mentais na sociedade brasileira", "Disserta√ß√£o", "M√©dio"),
    ("Democratiza√ß√£o do acesso ao cinema no Brasil", "Disserta√ß√£o", "F√°cil"), ("Manipula√ß√£o do comportamento do usu√°rio pelo controle de dados na internet", "Disserta√ß√£o", "M√©dio"),
    ("Os desafios da educa√ß√£o digital para jovens e crian√ßas no s√©culo XXI", "Disserta√ß√£o", "M√©dio"), ("O impacto da 'cultura do cancelamento' nas rela√ß√µes sociais", "Disserta√ß√£o", "Dif√≠cil"),
    ("Caminhos para combater a intoler√¢ncia religiosa no Brasil", "Disserta√ß√£o", "M√©dio"), ("A import√¢ncia da preserva√ß√£o do patrim√¥nio hist√≥rico-cultural", "Disserta√ß√£o", "F√°cil"),
    ("Desafios para a implementa√ß√£o da mobilidade urbana sustent√°vel no Brasil", "Disserta√ß√£o", "M√©dio"), ("O papel da ci√™ncia e tecnologia no desenvolvimento social", "Disserta√ß√£o", "F√°cil"),
    ("A quest√£o do desperd√≠cio de alimentos e a fome no Brasil", "Disserta√ß√£o", "M√©dio"), ("Impactos da intelig√™ncia artificial no mercado de trabalho", "Disserta√ß√£o", "Dif√≠cil"),
    ("A crise h√≠drica e a necessidade de uso consciente da √°gua", "Disserta√ß√£o", "F√°cil"), ("Os efeitos da superexposi√ß√£o √†s redes sociais na sa√∫de mental", "Disserta√ß√£o", "M√©dio"),
    ("A inclus√£o de pessoas com defici√™ncia (PCD) no mercado de trabalho", "Disserta√ß√£o", "M√©dio"), ("A problem√°tica do lixo eletr√¥nico na sociedade contempor√¢nea", "Disserta√ß√£o", "F√°cil"),
    ("Fake news: como combater a desinforma√ß√£o e seu impacto na democracia", "Disserta√ß√£o", "M√©dio"), ("A valoriza√ß√£o do esporte como ferramenta de inclus√£o social", "Disserta√ß√£o", "F√°cil"),
    ("Os desafios do sistema carcer√°rio brasileiro", "Disserta√ß√£o", "Dif√≠cil"), ("Evas√£o escolar em quest√£o no Brasil", "Disserta√ß√£o", "M√©dio"),
    ("A explora√ß√£o do trabalho infantil e seus reflexos sociais", "Disserta√ß√£o", "M√©dio"), ("O acesso √† moradia digna como um direito fundamental", "Disserta√ß√£o", "M√©dio"),
    ("A import√¢ncia da vacina√ß√£o para a sa√∫de p√∫blica", "Disserta√ß√£o", "F√°cil"), ("Consumismo e seus impactos no meio ambiente", "Disserta√ß√£o", "M√©dio"),
    ("A luta contra o etarismo (preconceito contra idosos) no Brasil", "Disserta√ß√£o", "M√©dio"), ("O papel da leitura na forma√ß√£o cr√≠tica do indiv√≠duo", "Disserta√ß√£o", "F√°cil"),
    ("Desafios para garantir a seguran√ßa alimentar da popula√ß√£o", "Disserta√ß√£o", "M√©dio"), ("A import√¢ncia do Sistema √önico de Sa√∫de (SUS) para o Brasil", "Disserta√ß√£o", "F√°cil"),
    ("Impactos do desmatamento na Amaz√¥nia para o equil√≠brio global", "Disserta√ß√£o", "Dif√≠cil"), ("A gravidez na adolesc√™ncia como um problema de sa√∫de p√∫blica", "Disserta√ß√£o", "M√©dio"),
    ("Ado√ß√£o de crian√ßas e adolescentes no Brasil: entraves e perspectivas", "Disserta√ß√£o", "M√©dio"), ("A gentrifica√ß√£o e seus efeitos nos centros urbanos", "Disserta√ß√£o", "Dif√≠cil"),
    ("O combate ao tr√°fico de animais silvestres", "Disserta√ß√£o", "M√©dio"), ("A import√¢ncia da representatividade na m√≠dia e na pol√≠tica", "Disserta√ß√£o", "M√©dio"),
    ("A crise dos refugiados e a xenofobia no s√©culo XXI", "Disserta√ß√£o", "Dif√≠cil"), ("O analfabetismo funcional como um obst√°culo ao desenvolvimento", "Disserta√ß√£o", "M√©dio"),
    ("Adoecimento mental no ambiente de trabalho (S√≠ndrome de Burnout)", "Disserta√ß√£o", "M√©dio"), ("A cultura da meritocracia e a desigualdade de oportunidades", "Disserta√ß√£o", "Dif√≠cil"),
    ("O papel da fam√≠lia na educa√ß√£o e forma√ß√£o dos jovens", "Disserta√ß√£o", "F√°cil"), ("A obsolesc√™ncia programada e seus impactos na sociedade de consumo", "Disserta√ß√£o", "M√©dio"),
    ("A import√¢ncia da demarca√ß√£o de terras ind√≠genas", "Disserta√ß√£o", "Dif√≠cil"), ("O desafio de combater o bullying e o cyberbullying nas escolas", "Disserta√ß√£o", "M√©dio"),
    ("A precariza√ß√£o do trabalho plataformizado (motoristas de aplicativo, entregadores)", "Disserta√ß√£o", "Dif√≠cil"), ("O uso de agrot√≥xicos e seus impactos na sa√∫de e meio ambiente", "Disserta√ß√£o", "M√©dio"),
    ("A import√¢ncia da participa√ß√£o pol√≠tica para a democracia", "Disserta√ß√£o", "F√°cil"), ("Os desafios da inclus√£o digital da terceira idade", "Disserta√ß√£o", "F√°cil"),
    ("A quest√£o da pirataria e a propriedade intelectual na era digital", "Disserta√ß√£o", "M√©dio"), ("Voluntariado: um caminho para a transforma√ß√£o social", "Disserta√ß√£o", "F√°cil")
]

def conectar_banco():
    try:
        conn = sqlite3.connect('concurso.db')
        conn.row_factory = sqlite3.Row
        print("Conex√£o com banco 'concurso.db' estabelecida.")
        return conn
    except Exception as e:
        print(f"ERRO FATAL ao conectar ao banco: {e}")
        return None

def atualizar_estrutura_banco(conn):
    print("Verificando/Atualizando estrutura das tabelas...")
    try:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS questoes (
                id INTEGER PRIMARY KEY AUTOINCREMENT, disciplina TEXT NOT NULL, materia TEXT NOT NULL,
                enunciado TEXT NOT NULL, alternativas TEXT NOT NULL, resposta_correta TEXT NOT NULL,
                dificuldade TEXT CHECK(dificuldade IN ('F√°cil', 'M√©dio', 'Dif√≠cil')) DEFAULT 'M√©dio',
                justificativa TEXT, dica TEXT, formula TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                peso INTEGER DEFAULT 1 ) ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS temas_redacao (
                id INTEGER PRIMARY KEY AUTOINCREMENT, titulo TEXT NOT NULL, descricao TEXT, tipo TEXT NOT NULL,
                dificuldade TEXT CHECK(dificuldade IN ('F√°cil', 'M√©dio', 'Dif√≠cil')) DEFAULT 'M√©dio',
                palavras_chave TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ) ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS historico_simulados (
                id INTEGER PRIMARY KEY AUTOINCREMENT, user_id TEXT NOT NULL, simulado_id TEXT NOT NULL UNIQUE,
                config TEXT NOT NULL, respostas TEXT NOT NULL, relatorio TEXT NOT NULL,
                data_inicio TIMESTAMP DEFAULT CURRENT_TIMESTAMP, data_fim TIMESTAMP, tempo_total_minutos REAL DEFAULT 0 ) ''')
        cursor.execute("PRAGMA table_info(questoes)")
        cols_q = [c[1] for c in cursor.fetchall()]
        if 'peso' not in cols_q: cursor.execute("ALTER TABLE questoes ADD COLUMN peso INTEGER DEFAULT 1")
        if 'justificativa' not in cols_q: cursor.execute("ALTER TABLE questoes ADD COLUMN justificativa TEXT")
        if 'dica' not in cols_q: cursor.execute("ALTER TABLE questoes ADD COLUMN dica TEXT")
        if 'formula' not in cols_q: cursor.execute("ALTER TABLE questoes ADD COLUMN formula TEXT")
        conn.commit()
        print("Estrutura do banco verificada/atualizada.")
    except Exception as e:
        print(f"ERRO ao atualizar estrutura do banco: {e}")

def parse_alternativas(texto_alternativas):
    texto_alternativas = texto_alternativas.strip()
    try:
        data = json.loads(texto_alternativas)
        if isinstance(data, dict): return {k.strip().upper(): v for k, v in data.items()}
    except json.JSONDecodeError: pass
    try:
        alt_dict = {}; partes = texto_alternativas.split('|')
        if len(partes) < 2 and '|' not in texto_alternativas:
             partes_re = re.split(r'\s+([B-Z])\)', texto_alternativas); novas_partes = [partes_re[0]]
             for i in range(1, len(partes_re), 2):
                 if i+1 < len(partes_re): novas_partes.append(partes_re[i] + ')' + partes_re[i+1])
             partes = novas_partes
        processed_keys = set()
        for parte in partes:
            parte = parte.strip();
            if not parte: continue
            match = re.match(r'^([A-Z])\s*\)', parte, re.IGNORECASE)
            if match:
                letra = match.group(1).upper(); texto = parte[match.end():].strip()
                if letra not in processed_keys: alt_dict[letra] = texto; processed_keys.add(letra)
            else: print(f"      AVISO: Parte da alternativa n√£o reconhecida: '{parte[:50]}...'")
        if len(alt_dict) >= 2: return {k: alt_dict[k] for k in sorted(alt_dict.keys())}
        else: print(f"      ERRO: N√£o extraiu alternativas v√°lidas de: '{texto_alternativas[:100]}...'"); return None
    except Exception as e_parse: print(f"      ERRO inesperado ao analisar alt '{texto_alternativas[:50]}...': {e_parse}"); return None

def importar_questoes_csv(conn):
    print("\n--- Iniciando Importa√ß√£o do 'questoes.csv' (Modo Diagn√≥stico) ---")
    csv_file = 'questoes.csv'
    if not os.path.exists(csv_file): print(f"ERRO FATAL: '{csv_file}' n√£o encontrado!"); return 0, 0
    cursor = conn.cursor()
    print("Limpando tabela 'questoes'...");
    try: cursor.execute("DELETE FROM questoes"); cursor.execute("DELETE FROM sqlite_sequence WHERE name='questoes'"); conn.commit(); print("Tabela 'questoes' limpa.")
    except Exception as e: print(f"ERRO ao limpar 'questoes': {e}"); return 0, 0
    sucesso_count = 0; falha_count = 0; linhas_total = 0
    try:
        encodings_to_try = ['utf-8-sig', 'utf-8', 'latin-1']; detected_encoding = None
        for enc in encodings_to_try:
             try:
                 with open(csv_file, mode='r', encoding=enc) as file: file.read(1024)
                 detected_encoding = enc; print(f"Detectado encoding: {detected_encoding}"); break
             except UnicodeDecodeError: continue
             except Exception as e_enc: print(f"Erro inesperado ao testar {enc}: {e_enc}")
        if not detected_encoding: print("ERRO FATAL: Encoding n√£o detectado."); return 0, 0
        with open(csv_file, mode='r', encoding=detected_encoding) as file:
            try:
                 sample = file.read(4096); dialect = csv.Sniffer().sniff(sample, delimiters=';,')
                 print(f"Sniffer detectou delimitador: '{dialect.delimiter}'")
            except csv.Error:
                 print("AVISO: Sniffer falhou. Verificando ';' vs ','..."); file.seek(0); first_line = file.readline()
                 if first_line.count(';') >= first_line.count(','): dialect = csv.excel; dialect.delimiter = ';'; print("Assumindo delimitador: ';'")
                 else: dialect = csv.excel; dialect.delimiter = ','; print("Assumindo delimitador: ','")
            file.seek(0); reader = csv.DictReader(file, dialect=dialect)
            colunas = reader.fieldnames
            if not colunas: print("ERRO FATAL: CSV vazio ou colunas n√£o lidas."); return 0, 0
            print(f"Colunas encontradas: {colunas}")
            mapa_colunas = { 'disciplina': next((c for c in colunas if 'disciplina' in c.lower()), None), 'materia': next((c for c in colunas if 'materia' in c.lower() or 'mat√©ria' in c.lower()), None), 'enunciado': next((c for c in colunas if 'enunciado' in c.lower()), None), 'alternativas': next((c for c in colunas if 'alternativas' in c.lower()), None), 'resposta_correta': next((c for c in colunas if 'resposta' in c.lower()), None), 'dificuldade': next((c for c in colunas if 'dificuldade' in c.lower()), None), 'justificativa': next((c for c in colunas if 'justificativa' in c.lower()), None), 'dica': next((c for c in colunas if 'dica' in c.lower()), None), 'formula': next((c for c in colunas if 'formula' in c.lower()), None), 'peso': next((c for c in colunas if 'peso' in c.lower()), None) }
            essenciais = ['disciplina', 'materia', 'enunciado', 'alternativas', 'resposta_correta']
            if any(mapa_colunas[key] is None for key in essenciais): print(f"ERRO FATAL: Colunas essenciais ({', '.join(essenciais)}) n√£o encontradas."); print(f"Mapeamento: {mapa_colunas}"); return 0, 0
            print("Mapeamento de colunas OK.")
            questoes_para_inserir = []; print("\n--- Processando linhas do CSV ---")
            for i, row in enumerate(reader):
                linhas_total += 1; print(f"  Linha CSV {i+2}: Processando...")
                if not all(row.get(mapa_colunas[key]) for key in essenciais if mapa_colunas[key]): print(f"      ERRO: Linha {i+2} inv√°lida/vazia. Pulando.\n      Dados: {row}"); falha_count += 1; continue
                try:
                    texto_alt = row.get(mapa_colunas['alternativas'], ''); alt_dict = parse_alternativas(texto_alt)
                    if alt_dict is None: raise ValueError(f"Falha ao processar alternativas: '{texto_alt[:100]}...'")
                    alternativas_json = json.dumps(alt_dict, ensure_ascii=False)
                    try: peso_valor = int(row.get(mapa_colunas.get('peso'), 1) or 1)
                    except (ValueError, TypeError): print(f"      AVISO: Peso inv√°lido linha {i+2}, usando 1. Valor: '{row.get(mapa_colunas.get('peso'))}'"); peso_valor = 1
                    q = ( row.get(mapa_colunas['disciplina'], 'N/A').strip(), row.get(mapa_colunas['materia'], 'N/A').strip(), row.get(mapa_colunas['enunciado'], 'N/A').strip(), alternativas_json, row.get(mapa_colunas['resposta_correta'], 'N/A').strip().upper(), row.get(mapa_colunas['dificuldade'], 'M√©dio').strip().capitalize(), row.get(mapa_colunas.get('justificativa'), '').strip(), row.get(mapa_colunas.get('dica'), '').strip(), row.get(mapa_colunas.get('formula'), '').strip(), peso_valor )
                    if not all(q[:5]): raise ValueError("Dados essenciais ausentes.")
                    questoes_para_inserir.append(q); print(f"      OK: Linha {i+2} processada."); sucesso_count += 1
                except (ValueError, TypeError, json.JSONDecodeError, KeyError) as e_row: print(f"      ERRO DETALHADO linha {i+2}: {e_row}\n      Dados: {row}"); falha_count += 1
                except Exception as e_inesperado: print(f"      ERRO GRAVE linha {i+2}: {e_inesperado}"); falha_count += 1
            print("\n--- Fim do Processamento ---")
            if not questoes_para_inserir: print("\nERRO GRAVE: Nenhuma quest√£o processada!"); return sucesso_count, falha_count
            print(f"\nInserindo {len(questoes_para_inserir)} quest√µes...");
            cursor.executemany('INSERT INTO questoes (disciplina, materia, enunciado, alternativas, resposta_correta, dificuldade, justificativa, dica, formula, peso) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', questoes_para_inserir)
            conn.commit(); print("Inser√ß√£o conclu√≠da.")
    except FileNotFoundError: print(f"ERRO FATAL: '{csv_file}' n√£o encontrado.")
    except Exception as e:
        print(f"ERRO GERAL na importa√ß√£o CSV: {e}")
        try: exc_type, exc_obj, exc_tb = sys.exc_info(); fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]; print(f"   Erro no arquivo {fname}, linha {exc_tb.tb_lineno}")
        except: pass
    finally:
        print("\n--- Resumo Importa√ß√£o Quest√µes ---"); print(f"Linhas lidas: {linhas_total}"); print(f"SUCESSO: {sucesso_count}"); print(f"ERRO: {falha_count}"); return sucesso_count, falha_count

def importar_temas_redacao(conn):
    print("\n--- Iniciando Importa√ß√£o Temas ---")
    try:
        cursor = conn.cursor(); cursor.execute("DELETE FROM temas_redacao"); cursor.execute("DELETE FROM sqlite_sequence WHERE name='temas_redacao'"); conn.commit();
        temas_para_inserir = []
        for titulo, tipo, dificuldade in temas_redacao_lista:
            descricao = f"Desenvolva um texto dissertativo-argumentativo sobre o tema: '{titulo}'."; palavras_chave = ', '.join(titulo.lower().split(' ')[1:4])
            temas_para_inserir.append((titulo, descricao, tipo, dificuldade, palavras_chave))
        cursor.executemany('INSERT INTO temas_redacao (titulo, descricao, tipo, dificuldade, palavras_chave) VALUES (?, ?, ?, ?, ?)', temas_para_inserir)
        conn.commit(); print(f"Sucesso! {len(temas_para_inserir)} temas importados."); return len(temas_para_inserir)
    except Exception as e: print(f"Erro ao importar temas: {e}"); return 0

if __name__ == "__main__":
    conn = conectar_banco()
    if conn:
        atualizar_estrutura_banco(conn)
        questoes_ok, questoes_falha = importar_questoes_csv(conn)
        temas_ok = importar_temas_redacao(conn)
        conn.close()
        print("\n--- IMPORTA√á√ÉO E ATUALIZA√á√ÉO CONCLU√çDAS ---")
        if questoes_ok == 0: print("\n!!! ALERTA M√ÅXIMO: NENHUMA QUEST√ÉO IMPORTADA !!!\n   Verifique erros e corrija 'questoes.csv'.")
        elif questoes_falha > 0: print(f"\nAVISO: {questoes_falha} linha(s) do CSV tiveram erro.\n   Verifique os detalhes acima.")
        else: print("\nOK: Importa√ß√£o de quest√µes parece OK.")
        if temas_ok == 50: print("OK: Importa√ß√£o de temas OK.")
        else: print("AVISO: Problema na importa√ß√£o dos temas.")
    else: print("Importa√ß√£o falhou: N√£o conectou ao banco.")
'@

# Salvar o script Python MELHORADO no disco
try {
    Set-Content -Path "importar_dados.py" -Value $pythonScriptContentMelhorado -Encoding UTF8
    Write-Host "‚úÖ Sucesso! Script 'importar_dados.py' foi atualizado com mais diagn√≥sticos." -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erro ao salvar o arquivo 'importar_dados.py' melhorado." -ForegroundColor Red
    Write-Host $_
}

Write-Host "---------------------------------------------------------"
Write-Host "Pr√≥ximo passo: Recriar o banco USANDO ESTE NOVO SCRIPT." -ForegroundColor Cyan
Write-Host "Execute novamente o script do Passo 9 (SE VOC√ä J√Å O SALVOU):"
Write-Host "   .\\Passo_9_Refazer_Banco.ps1" -ForegroundColor White
Write-Host "OU, se n√£o salvou, salve o c√≥digo do Passo 9 e execute."
Write-Host "OBSERVE ATENTAMENTE a sa√≠da dele. Ele vai detalhar erros por linha no CSV."